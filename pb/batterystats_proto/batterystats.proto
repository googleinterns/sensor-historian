// Copyright 2016 Google LLC. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//
// Protocol buffers for BatteryStats.
// See frameworks/base/core/java/android/os/BatteryStats.java.

syntax = "proto2";

package batterystats;

import "github.com/google/battery-historian/pb/build_proto/build.proto";

message BatteryStats {
  // Unique ID for the record. Concatenation of end_time_usec, shard, and the index in the shard.
  optional string record_id = 1;
  // Encrypted android_id. Cleared for user/release-keys builds.
  optional string android_idx = 2;
  // When aggregation starts.
  optional int64 start_time_usec = 3;
  // When aggregation ends.
  optional int64 end_time_usec = 4;
  // start_time_usec in "YYYY-MM-DD HH:MM:SS" (MTV time).
  optional string start_time_str = 5;
  // end_time_usec in "YYYY-MM-DD HH:MM:SS" (MTV time).
  optional string end_time_str = 6;
  // start_time_str in local time.
  optional string local_start_time_str = 7;
  // end_time_str in local time.
  optional string local_end_time_str = 8;
  // e.g., auto.googlefood.jellybean.
  repeated string device_group = 9;
  // e.g., user-domain-google.com.
  repeated string checkin_rule = 10;
  // True if it's Googler's data.
  optional bool is_googler = 11;
  // True if it's user/release-keys.
  optional bool is_user_release = 12;
  // Info from the build fingerprint.
  optional build.Build build = 13;
  // Android SDK version.
  optional int32 sdk_version = 14;
  // GMS Core version.
  optional int32 gms_version = 15;
  // System bootloader version.
  optional string bootloader = 16;
  // Radio subsystem version.
  optional string radio = 17;
  // e.g., Verizon Wireless/US.
  optional string carrier = 18;
  // e.g., US.
  optional string country_code = 19;
  // e.g., America/Los_Angeles.
  optional string time_zone = 20;
  // Checkin report version.
  optional int32 report_version = 21;
  // True for the original report.
  optional bool is_original = 22;
  // True for the latest report among originals sharing start_clock_time_msec.
  optional bool is_latest = 23;
  // True for the report generated from diff between originals or if such
  // operation does not make sense. Note is_original and is_diff are not
  // mutually exclusive.
  optional bool is_diff = 24;
  // True if the android wear device is paired to an ALT mode companion on iPhone.
  optional bool is_alt_mode = 29;
  // Warnings generated when parsing the report.
  repeated string warning = 30;
  // Errors generated when parsing the report.
  repeated string error = 31;

  enum AggregationType {
    // All of the data in the stats.
    SINCE_CHARGED = 0;
    // Only the last run in the stats.
    LAST = 1 [deprecated=true];
    // Only the current run in the stats.
    CURRENT = 2 [deprecated=true];
    // Only the run since the last time the device was unplugged in the stats.
    SINCE_UNPLUGGED = 3 [deprecated=true];
  };
  optional AggregationType aggregation_type = 25;

  // Data collected about a single UID.
  //
  // In some cases, times are 'apportioned' (i.e. refer to the blame apportioned
  // to this app amongst all apps) rather than the actual time spent. For
  // example, if two apps hold wakelocks simultaneously, the time apportioned to
  // a single app is actually only part of the time it spent holding the
  // wakelock, estimating how much of the device's total wakelock time can be
  // blamed on this app. Other times are 'actual', meaning that they
  // do not take into account usage by other apps.
  // For example, suppose app A is holding wakelock w for 10 minutes and, in the
  // middle of those 10 minutes, app B holds wakelock w for 4 minutes. Then
  // App A actual wakelock time is 10 minutes.
  // App B actual wakelock time is 4 minutes.
  // App A apportioned wakelock time might be (10-4) + 4/2 = 8 minutes.
  // App B apportioned wakelock time might be 4/2 = 2 minutes.
  // Note that the sum of the apportioned times is 10 minutes, which is the
  // length of the time period that wakelock w was held.
  message App {
    // e.g., com.google.android.gms.
    optional string name = 1;
    // e.g., 4224038.
    optional int32 version_code = 2;
    // e.g., 1000.
    optional int32 uid = 3;
    // e.g. 1.3
    optional string version_name = 24;
    // List of packages sharing the UID. (e.g., gms, gsf for Google Services)
    message Child {
      optional string name = 1;
      optional int32 version_code = 2;
      optional string version_name = 3;
      optional Apk apk = 4; // apk section in raw checkin data.
    };
    repeated Child child = 13;
    // For the most important child (to make it easy to query by dremel).
    // e.g., gms for Google Services.
    optional Child head_child = 18 [deprecated=true];

    message Apk {
      // #wakeup alarms that executed. Not int because some packages share the UID.
      // The wakeup count is split further by name in the wakeup_alarm field in
      // report version 17 and up.
      optional float wakeups = 1;
      message Service {
        // e.g., com.google.android.gms.icing.service.IndexService.
        optional string name = 1;
        // Time spent started.
        optional float start_time_msec = 2;
        // #times it was started.
        optional float starts = 3;
        // #times it was launched.
        optional float launches = 4;
      };
      repeated Service service = 2;
    };
    optional Apk apk = 4; // Aggregate of all sub-child.apk values.

    message Audio {
      // Duration spent running audio.
      optional float total_time_msec = 1;
      // #times.
      optional float count = 2;
    };
    optional Audio audio = 19; // aud.

    // Idle for bluetooth is associated with scanning.
    optional ControllerActivity bluetooth_controller = 25; // ble

    // Bluetooth misc data.
    message BluetoothMisc {
      // Duration spent BLE scanning blamed on this App (i.e. apportioned to
      // this app amongst all apps doing BLE scanning; see explanation of
      // 'apportioned' in App's comment).
      optional int64 ble_scan_time_msec = 1;
      // BLE scan count.
      optional int32 ble_scan_count = 2;
      // # of BLE scans when app is in background. (Included in ble_scan_count.)
      optional int32 ble_scan_count_bg = 3;
      // Duration spent BLE scanning in total (irrespective of whether other
      // apps were also simultaneously scanning; see explanation of
      // 'apportioned' vs. 'actual' in App's comment).
      // Includes both foreground + background use.
      optional int64 ble_scan_actual_time_msec = 4;
      // Duration spent BLE scanning when app is in background (irrespective of
      // whether other apps were also simultaneously scanning; see explanation
      // of 'apportioned' vs. 'actual' in App's comment).
      // (Subtracting from ble_scan_actual_time_msec will yield
      // foreground usage.)
      optional int64 ble_scan_actual_time_msec_bg = 5;
      // Count of results returned by BLE scanning.
      optional int32 ble_scan_result_count = 6;
    }
    optional BluetoothMisc bluetooth_misc = 28; // blem

    message Camera {
      // Duration spent running camera.
      optional float total_time_msec = 1;
      // #times.
      optional float count = 2;
    };
    optional Camera camera = 20; // cam.

    message Cpu {
      // Total CPU time with processes executing in userspace. Summed up across
      // multiple cores.
      optional float user_time_ms = 1;
      // Total CPU time with processes executing kernel syscalls. Summed up
      // across multiple cores.
      optional float system_time_ms = 2;
      // Total CPU power consumed in milli-ampere-milliseconds.
      optional float power_ma_ms = 3;
    }
    optional Cpu cpu = 23; // cpu.

    message Flashlight {
      // Duration spent running flashlight.
      optional float total_time_msec = 1;
      // #times.
      optional float count = 2;
    };
    optional Flashlight flashlight = 21; // fla.

    message Foreground {
      // Duration spent running as foreground activity.
      optional float total_time_msec = 1;
      // #times.
      optional float count = 2;
    };
    optional Foreground foreground = 5; // fg.

    // The modem controller doesn't provide a mechanism for determining when an
    // app has the modem active but is not transmitting data, so there's no way
    // to idle modem time to a specific UID, hence, idle time will always be 0
    // for app.modem_controller.
    optional ControllerActivity modem_controller = 26; // mcd.

    message Network {
      // Mobile data traffic (total, background + foreground).
      optional float mobile_bytes_rx = 1;
      optional float mobile_bytes_tx = 2;
      // Wifi data traffic (total, background + foreground).
      optional float wifi_bytes_rx = 3;
      optional float wifi_bytes_tx = 4;
      // In packets (total, background + foreground).
      optional float mobile_packets_rx = 5;
      optional float mobile_packets_tx = 6;
      optional float wifi_packets_rx = 7;
      optional float wifi_packets_tx = 8;
      // Radio active duration.
      optional float mobile_active_time_msec = 9;
      optional float mobile_active_count = 10;
      optional int64 bt_bytes_rx = 11;
      optional int64 bt_bytes_tx = 12;
      // Number of times the app woke up the mobile radio.
      optional int32 mobile_wakeup_count = 13;
      // Number of times the app woke up the wifi radio.
      optional int32 wifi_wakeup_count = 14;
      // Mobile data traffic in the background only, included in total above.
      optional int64 mobile_bytes_bg_rx = 15;
      optional int64 mobile_bytes_bg_tx = 16;
      // Wifi data traffic in the background only, included in total above.
      optional int64 wifi_bytes_bg_rx = 17;
      optional int64 wifi_bytes_bg_tx = 18;
      // In packets (background only, included in total packets above).
      optional int64 mobile_packets_bg_rx = 19;
      optional int64 mobile_packets_bg_tx = 20;
      optional int64 wifi_packets_bg_rx = 21;
      optional int64 wifi_packets_bg_tx = 22;
    };
    optional Network network = 6; // nt.

    // APP only. See System.PowerUseItem for others.
    message PowerUseItem {
      // Estimated power use in mAh.
      optional float computed_power_mah = 1;
    };
    optional PowerUseItem power_use_item = 7; // pwi.

    message Process {
      // e.g., com.google.process.location.
      optional string name = 1;
      // Time spent executing in user code.
      optional float user_time_msec = 2;
      // Time in system code.
      optional float system_time_msec = 3;
      // Time in the foreground.
      optional float foreground_time_msec = 4;
      // #times the process has been started.
      optional float starts = 5;
      // #times the process has ANRed.
      optional float anrs = 6;
      // #times the process has crashed.
      optional float crashes = 7;
    };
    repeated Process process = 8; // pr.

    message ScheduledJob {
      optional string name = 1;
      // Duration of use. Includes both foreground + background use.
      optional float total_time_msec = 2;
      // #times of use.
      optional float count = 3;
      // Duration of use when app is in background.
      // (Subtracting from total_time_msec will yield foreground usage.)
      optional int64 background_time_msec = 4;
      // #times of use when in background. (This is included in count above.)
      optional int32 background_count = 5;
    };
    repeated ScheduledJob scheduled_job = 14; // jb.

    message Sensor {
      // e.g., 24 (significant motion detector).
      optional int32 number = 1;
      // Duration of use blamed on this App (i.e. apportioned to this app
      // amongst all apps using this sensor; see explanation of
      // 'apportioned' in App's comment).
      optional float total_time_msec = 2;
      // #times of use.
      optional float count = 3;
      // #times of use when in background. This is included in count above.
      optional int32 background_count = 4;
      // Duration of use (irrespective of whether other apps were also
      // simultaneously using the sensor; see explanation of
      // 'apportioned' vs. 'actual' in App's comment).
      // Includes both foreground + background use.
      optional int64 actual_time_msec = 5;
      // Duration of use when app is in background (irrespective of
      // whether other apps were also simultaneously using the sensor; see
      // explanation of 'apportioned' vs. 'actual' in App's comment).
      // (Subtracting from actual_time_msec will yield foreground usage.)
      optional int64 background_actual_time_msec = 6;
    };
    repeated Sensor sensor = 9; // sr.

    message StateTime {
      // All of these (non-deprecated) states are mutually exclusive and can be
      // added together to find the total time a uid has had any processes
      // running at all. They should not be trusted for report versions < 17.

      // In approximate order or priority (top being what the framework considers
      // most important and is thus least likely to kill when resources are needed):
      // top > foreground service > top sleeping > foreground > background > cached

      // Time the uid had any processes in an active foreground state, but none
      // in the "top sleeping" or better state.
      optional float foreground_time_msec = 1;
      // Time the uid had any process in active state (not cached).
      // Deprecated as of report version 17.
      optional float active_time_msec = 2 [deprecated = true];
      // Time the uid had any processes that were sitting around cached, not in
      // one of the other active states.
      optional float cached_time_msec = 3;
      // Time the uid had any processes in the top state (or above, such as
      // persistent).
      optional int64 top_time_msec = 4;
      // Time the uid had any process with a started out bound foreground
      // service, but none in the "top" state.
      optional int64 foreground_service_time_msec = 5;
      // Time the uid had any process that is top while the device was sleeping,
      // but none in the "foreground service" or better state.
      // Sleeping is mostly screen off, but also includes the time when the
      // screen is on but the device has not yet been unlocked.
      optional int64 top_sleeping_time_msec = 6;
      // Time the uid had any process in an active background state, but none in
      // the "foreground" or better state.
      optional int64 background_time_msec = 7;
    };
    optional StateTime state_time = 15; // st.

    message Sync {
      optional string name = 1;
      // Duration of use. Includes both foreground + background use.
      optional float total_time_msec = 2;
      // #times of use.
      optional float count = 3;
      // Duration of use when app is in background.
      // (Subtracting from total_time_msec will yield foreground usage.)
      optional int64 background_time_msec = 4;
      // #times of use when in background. (This is included in count above.)
      optional int32 background_count = 5;
    };
    repeated Sync sync = 16; // sy.

    message UserActivity {
      enum Name {
        OTHER = 0;
        BUTTON = 1;
        TOUCH = 2;
        // When an accessibility service takes an action on behalf of the user.
        ACCESSIBILITY = 3;
      };
      optional Name name = 1;
      optional float count = 2;
    };
    repeated UserActivity user_activity = 17; // ua.

    message Vibrator {
      // Duration of use.
      optional float total_time_msec = 1;
      // #times of use.
      optional float count = 2;
    };
    optional Vibrator vibrator = 10; // vib.

    message Video {
      // Duration spent with video on.
      optional float total_time_msec = 1;
      // #times.
      optional float count = 2;
    };
    optional Video video = 22; // vid.

    message Wakelock {
      // PII-free wakelock names as a result of:
      // 1. regexp replacement (e.g., email address).
      // 2. removal of "unpopular" wakelock names that appear less than X%
      //    (in terms of #unique android_id's) of all daily reports.
      optional string name = 1;

      // Full wakelocks keep the screen on. Based on
      // PowerManager.SCREEN_BRIGHT_WAKE_LOCK (deprecated in API 13) and
      // PowerManager.SCREEN_DIM_WAKE_LOCK (deprecated in API 17).
      // If multiple full wakelocks are held at the same time, the total time
      // is split evenly between them, so this value (full_time_msec) may not
      // constitute the complete duration the wakelock was held. That is, this
      // value is 'apportioned' in the sense described in App's comment.
      optional float full_time_msec = 2;
      optional float full_count = 3;
      // Currently, current and max (as of their introduction in v19) and total
      // (as of its introduction in v21) durations are not tracked for
      // full wakelocks, and 0 or -1 will always be printed out for them.
      optional int64 full_current_duration_msec = 8;
      optional int64 full_max_duration_msec = 9;
      optional int64 full_total_duration_msec = 14;

      // Partial wakelocks ensure the CPU is running while allowing the screen
      // to turn off. Based on PowerManager.PARTIAL_WAKE_LOCK.
      // Partial wakelock metrics are only recorded when the device is unplugged
      // *and* the screen is off.
      // If multiple partial wakelocks are held at the same time, the total time
      // is split evenly between them, so this value (partial_time_msec) may not
      // constitute the complete duration the wakelock was held. That is, this
      // value is 'apportioned' in the sense described in App's comment.
      optional float partial_time_msec = 4;
      optional float partial_count = 5;
      // If the wakelock was being held at the time of the report, this will be
      // how long the current hold had been active for. Unlike
      // partial_time_msec, this duration is not split between wakelocks and so
      // constitutes the complete current wakelock duration.
      optional int64 partial_current_duration_msec = 10;
      // The maximum duration the wakelock had been held for. Unlike
      // partial_time_msec, this duration is not split between wakelocks and so
      // constitutes the complete maximum wakelock duration.
      optional int64 partial_max_duration_msec = 11;
      // The total duration the wakelock had been held for. Unlike
      // partial_time_msec, this duration is not split between wakelocks and so
      // constitutes the complete total wakelock duration. That is, this
      // value is 'actual' in the sense described in App's comment.
      optional int64 partial_total_duration_msec = 15;

      // Window wakelocks keep the screen on.
      // If multiple window wakelocks are held at the same time, the total time
      // is split evenly between them, so this value (window_time_msec) may not
      // constitute the complete duration the wakelock was held. That is, this
      // value is 'apportioned' in the sense described in App's comment.
      optional float window_time_msec = 6;
      optional float window_count = 7;
      // Currently, current and max (as of their introduction in v19) and total
      // (as of its introduction in v21) durations are not tracked for
      // window wakelocks, and 0 or -1 will always be printed out for them.
      optional int64 window_current_duration_msec = 12;
      optional int64 window_max_duration_msec = 13;
      optional int64 window_total_duration_msec = 16;

      // Next tag = 17
    };
    repeated Wakelock wakelock = 11; // wl.

    message WakeupAlarm {
      optional string name = 1;
      optional int32 count = 2;
    }
    // If an apk doesn't have service stats, then the APK_DATA line isn't
    // printed, so apk.wakeups could be 0 even though there are WakeupAlarm
    // entries here.
    repeated WakeupAlarm wakeup_alarm = 29; // wua.

    message Wifi {
      // Duration holding Wifi-lock.
      optional float full_wifi_lock_time_msec = 1;
      // Duration performing Wifi-scan blamed on this App (i.e. apportioned to
      // this app amongst all apps doing Wifi-scanning; see explanation of
      // 'apportioned' in App's comment).
      optional float scan_time_msec = 2;
      // Duration running Wifi.
      optional float running_time_msec = 3;
      optional float scan_count = 4;
      optional float idle_time_msec = 5 [deprecated = true]; // Moved to wifi_controller data.
      optional float rx_time_msec = 6 [deprecated = true]; // Moved to wifi_controller data.
      optional float tx_time_msec = 7 [deprecated = true]; // Moved to wifi_controller data.
      // #scans performed when app is in background. (Included in scan_count.)
      optional int32 scan_count_bg = 8;
      // Duration performing Wifi-scan in total (irrespective of whether other
      // apps were also simultaneously scanning; see explanation of
      // 'apportioned' vs. 'actual' in App's comment).
      // Includes both foreground + background use.
      optional int64 scan_actual_time_msec = 9;
      // Duration performing Wifi-scan when app is in background (irrespective
      // of whether other apps were also simultaneously scanning; see
      // explanation of 'apportioned' vs. 'actual' in App's comment).
      // (Subtracting from scan_actual_time_msec will yield foreground
      // usage.)
      optional int64 scan_actual_time_msec_bg = 10;
    };
    optional Wifi wifi = 12; // wfl.

    // Idle for wifi is associated with wifi full locks.
    optional ControllerActivity wifi_controller = 27; // wfcd.

    // Next tag: 30
  };
  repeated App app = 26; // App-level stats.

  message ControllerActivity {
    // Time (milliseconds) spent in the idle state.
    optional int64 idle_time_msec = 1;
    // Time (milliseconds) spent in the receive state.
    optional int64 rx_time_msec = 2;
    // Total power (mAh) consumed by the controller in all states. The value may
    // always be 0 if the device doesn't support power calculations.
    optional int64 power_mah = 3;

    // Represents a transmit level, where each level may draw a different amount
    // of power. The levels themselves are controller-specific (and may possibly
    // be device specific...yet to be confirmed).
    message TxLevel {
      // Transmit level. Higher levels draw more power.
      optional int32 level = 1;
      // Time spent in this specific transmit level state.
      optional int64 time_msec = 2;
    }
    repeated TxLevel tx = 4;
  }

  message System {
    message Battery {
      // #times the device has been started.
      optional float start_count = 1;
      // Realtime on battery.
      optional float battery_realtime_msec = 2;
      // Uptime (i.e., not suspend).
      optional float battery_uptime_msec = 3;
      // Total realtime. Should match battery_realtime_msec for SINCE_UNPLUGGED.
      optional float total_realtime_msec = 4;
      optional float total_uptime_msec = 5;
      // Wall clock time when the data collection started.
      optional int64 start_clock_time_msec = 6;
      // Time spent on battery with the screen off.
      optional float screen_off_realtime_msec = 7;
      optional float screen_off_uptime_msec = 8;
      // The estimated real battery capacity, which may be less than the
      // declared battery capacity (for example, because of battery aging).
      optional int64 estimated_battery_capacity_mah = 9;
      // The minimum learned battery capacity in uAh.
      optional int64 min_learned_battery_capacity_uah = 10;
      // The maximum learned battery capacity in uAh.
      optional int64 max_learned_battery_capacity_uah = 11;
    };
    optional Battery battery = 1; // bt.

    message BatteryDischarge {
      // Discharged battery percentage points since the stats were last reset
      // after charging (lower bound approximation).
      optional float lower_bound = 1;
      // Upper bound approximation.
      optional float upper_bound = 2;
      // Discharged points while screen is on.
      optional float screen_on = 3;
      optional float screen_off = 4;
      // Total amount of battery discharged in mAh. This will only be non-zero
      // for devices that report battery discharge via a coulomb counter.
      optional int64 total_mah = 5;
      // Total amount of battery discharged while the screen was off in mAh.
      // This will only be non-zero for devices that report battery discharge
      // via a coulomb counter.
      optional int64 total_mah_screen_off = 6;
    };
    optional BatteryDischarge battery_discharge = 2; // dc.

    message BatteryLevel {
      // The battery percentage level at the last time the device was unplugged.
      optional float start_level = 1;
      // The current level.
      optional float current_level = 2;
    };
    optional BatteryLevel battery_level = 3; // lv.

    message BluetoothState {
      enum Name {
        INACTIVE = 0;
        LOW = 1;
        MEDIUM = 2;
        HIGH = 3;
      };
      optional Name name = 1;
      // Duration running in the given state.
      optional float time_msec = 2;
      // #times entering the state.
      optional float count = 3;
    };
    repeated BluetoothState bluetooth_state = 4 [deprecated=true]; // bst & bsc.

    // ChargeStep tracks data for which conditions were continuously held for
    // the entire duration. Field for which the conditions were not consistent
    // for the entire duration should be marked MIXED.
    message ChargeStep {
      optional float time_msec = 1;
      // Battery level
      optional float level = 2;
      // State of the display.
      optional DisplayState.State display_state = 3;
      // Indicates status in power save mode.
      optional PowerSaveMode.Mode power_save_mode = 4;
      // Indicates status in Doze mode.
      optional IdleMode.Mode idle_mode = 5;
    };
    repeated ChargeStep charge_step = 18; // csd.

    // Approximation for how much time remains until the battery is fully
    // charged. The device will print -1 if there wasn't enough data to
    // calculate an estimate, or if the battery is currently discharging.
    message ChargeTimeRemaining {
      optional int64 usec = 1;
    }
    optional ChargeTimeRemaining charge_time_remaining = 25;

    message DataConnection {
      enum Name {
        NONE = 0;
        GPRS = 1;
        EDGE = 2;
        UMTS = 3;
        CDMA = 4;
        EVDO_0 = 5;
        EVDO_A = 6;
        ONE_X_RTT = 7; // 1xRTT.
        HSDPA = 8;
        HSUPA = 9;
        HSPA = 10;
        IDEN = 11;
        EVDO_B = 12;
        LTE = 13;
        EHRPD = 14;
        HSPAP = 15;
        OTHER = 16;
      };
      optional Name name = 1;
      // Duration running in the given state.
      optional float time_msec = 2;
      // #times entering the state.
      optional float count = 3;
    };
    repeated DataConnection data_connection = 5; // dct & dcc.

    // DischargeStep tracks data for which conditions were continuously held for
    // the entire duration. Field for which the conditions were not consistent
    // for the entire duration should be marked MIXED.
    message DischargeStep {
      optional float time_msec = 1;
      // Battery level
      optional float level = 2;
      // State of the display.
      optional DisplayState.State display_state = 3;
      // Indicates status in power save mode.
      optional PowerSaveMode.Mode power_save_mode = 4;
      // Indicates status in idle mode.
      optional IdleMode.Mode idle_mode = 5;
    };
    repeated DischargeStep discharge_step = 19; // dsd.

    // Approximation for how much run time is remaining on the battery. The
    // device will print -1 if there wasn't enough data to calculate an estimate
    // or if the battery is currently charging.
    message DischargeTimeRemaining {
      optional int64 usec = 1;
    }
    optional DischargeTimeRemaining discharge_time_remaining = 26;

    message DisplayState {
      enum State {
        MIXED = 0;
        ON = 1;
        OFF = 2;
        DOZE = 3;
        DOZE_SUSPEND = 4;
      }
    };

    // Total bluetooth data
    message GlobalBluetooth {
      optional float bluetooth_idle_time_msec = 1;
      optional float bluetooth_rx_time_msec = 2;
      optional float bluetooth_tx_time_msec = 3;
      optional float bluetooth_power_mah = 4;
    };
    optional GlobalBluetooth global_bluetooth = 20 [deprecated = true]; // gble pre report_version 17

    // tx_time and power were swapped during report version 17, so they cannot
    // be trusted in version 17.
    optional ControllerActivity global_bluetooth_controller = 22; // gble post report_version 17

    optional ControllerActivity global_modem_controller = 23; // gmcd

    // "Total" view (vs. Network).
    message GlobalNetwork {
      optional float mobile_bytes_rx = 1;
      optional float mobile_bytes_tx = 2;
      optional float wifi_bytes_rx = 3;
      optional float wifi_bytes_tx = 4;
      optional float mobile_packets_rx = 5;
      optional float mobile_packets_tx = 6;
      optional float wifi_packets_rx = 7;
      optional float wifi_packets_tx = 8;
      optional int64 bt_bytes_rx = 9;
      optional int64 bt_bytes_tx = 10;
    };
    optional GlobalNetwork global_network = 6; // gn.

    // Total wifi data (includes app wifi usage).
    message GlobalWifi {
      // Wifi on and wifi running are mostly legacy and shouldn't have a
      // difference in practice.
      optional float wifi_on_time_msec = 1;
      optional float wifi_running_time_msec = 2;
      optional float wifi_idle_time_msec = 3 [deprecated = true]; // Moved to global_wifi_controller data.
      // Rx and Tx times are reported from the Wifi chip. Running time is
      // recorded based on API calls, so it's more of an estimate.
      // RxTime + TxTime doesn't need to equal RunningTime.
      optional float wifi_rx_time_msec = 4 [deprecated = true]; // Moved to global_wifi_controller data.
      optional float wifi_tx_time_msec = 5 [deprecated = true]; // Moved to global_wifi_controller data.
      optional float wifi_power_mah = 6 [deprecated = true]; // Moved to global_wifi_controller data.
    };
    optional GlobalWifi global_wifi = 21; // gwfl

    optional ControllerActivity global_wifi_controller = 24; // gwfcd

    message IdleMode {
      enum Mode {
        // NO_DATA is intended for older reports that did not have an idle mode
        // section.
        NO_DATA = 0;
        MIXED = 1;
        ON = 2;
        OFF = 3;
      }
    };

    // Similar to Wakelock.
    // Kernel wakelock metrics are only recorded when the device is unplugged
    // *and* the screen is off.
    message KernelWakelock {
      optional string name = 1;
      optional float time_msec = 2;
      optional float count = 3;
      // The kernel doesn't have the data to enable printing out current and max
      // durations, so -1 is always printed out for them.
      optional int64 current_duration_msec = 4;
      optional int64 max_duration_msec = 5;
    };
    repeated KernelWakelock kernel_wakelock = 7; // kwl.

    // "Total" view (vs. other App-specific stats above).
    message Misc {
      optional float screen_on_time_msec = 1;
      // battery_realtime - screen_on_time.
      optional float screen_off_time_msec = 2;
      // Active phone call time.
      optional float phone_on_time_msec = 3;
      // Duration of Wifi being enabled.
      optional float wifi_on_time_msec = 4 [deprecated=true];
      // Duration of Wifi being on and the driver being in the running state.
      optional float wifi_running_time_msec = 5 [deprecated=true];
      optional float bluetooth_on_time_msec = 6 [deprecated=true]; // This field no longer exists in report version 14+.
      optional float mobile_bytes_rx = 7 [deprecated=true];
      optional float mobile_bytes_tx = 8 [deprecated=true];
      optional float wifi_bytes_rx = 9 [deprecated=true];
      optional float wifi_bytes_tx = 10 [deprecated=true];
      optional float full_wakelock_time_msec = 11;
      optional float partial_wakelock_time_msec = 12;
      optional float mobile_active_time_msec = 13;
      optional float mobile_active_adjusted_time_msec = 14;
      optional float interactive_time_msec = 15;
      // Amount of time power save mode was on.
      optional float low_power_mode_enabled_time_msec = 16;
      // #times that connectivity state changed.
      optional float connectivity_changes = 17;
      // When the device has seen no activity, it goes into
      // idle (Doze) mode. https://youtu.be/N72ksDKrX6c
      optional float device_idle_mode_enabled_time_msec = 18;
      optional float device_idle_mode_enabled_count = 19;
      // Idling time encompasses "idle" time and the idle maintenance windows that allow apps to operate.
      optional float device_idling_time_msec = 20;
      optional float device_idling_count = 21;
      // # times the mobile radio was active.
      optional float mobile_active_count = 22;
      // Amount of time the mobile radio was on but the time couldn't be attributed to any app.
      optional float mobile_active_unknown_time = 23;
      // Light-weight idle (Doze) mode turns on after the screen has been off for some time,
      // and then cycles through periods of light-weight idle with maintenance
      // windows, regardless of whether the device is moving around.
      optional int64 device_light_idle_mode_enabled_time_msec = 24;
      optional int32 device_light_idle_mode_enabled_count = 25;
      // Light idling time encompasses "light idle" time and the maintenance
      // windows that allow apps to operate.
      optional int64 device_light_idling_time_msec = 26;
      optional int32 device_light_idling_count = 27;
      optional int64 max_device_light_idle_mode_enabled_time_msec = 28;
      optional int64 max_device_idle_mode_enabled_time_msec = 29;
    };
    optional Misc misc = 8; // m.

    message PowerSaveMode {
      enum Mode {
        MIXED = 0;
        ON = 1;
        OFF = 2;
      }
    };

    message PowerUseItem {
      enum Name {
        IDLE = 0;
        CELL = 1;
        PHONE = 2;
        WIFI = 3;
        BLUETOOTH = 4;
        SCREEN = 5;
        APP = 6; // Aggregated over all apps (vs. App.PowerUseItem).
        USER = 7;
        UNACCOUNTED = 8;
        OVERCOUNTED = 9;
        DEFAULT = 10;
        FLASHLIGHT = 11;
      };
      optional Name name = 1;
      optional float computed_power_mah = 2;
    };
    repeated PowerUseItem power_use_item = 9; // pwi.

    message PowerUseSummary {
      optional float battery_capacity_mah = 1;
      optional float computed_power_mah = 2;
      // Lower bound of actual power drained.
      optional float min_drained_power_mah = 3;
      // Upper bound of actual power drained.
      optional float max_drained_power_mah = 4;
    };
    optional PowerUseSummary power_use_summary = 10; // pws.

    message ScreenBrightness {
      enum Name {
        DARK = 0; // Not screen-off.
        DIM = 1;
        MEDIUM = 2;
        LIGHT = 3;
        BRIGHT = 4;
      };
      optional Name name = 1;
      // Duration.
      optional float time_msec = 2;
    };
    repeated ScreenBrightness screen_brightness = 11; // br.

    message SignalScanningTime {
      // Duration trying to acquire a signal.
      optional float time_msec = 1;
    };
    optional SignalScanningTime signal_scanning_time = 12; // sst.

    message SignalStrength { // PhoneSignalStrength (vs. WifiSignalStrength).
      enum Name {
        NONE_OR_UNKNOWN = 0;
        POOR = 1;
        MODERATE = 2;
        GOOD = 3;
        GREAT = 4;
      };
      optional Name name = 1;
      // Duration running with the given signal strength.
      optional float time_msec = 2;
      // #times entering the given signal strength.
      optional float count = 3;
    };
    repeated SignalStrength signal_strength = 13; // sgt & sgc.

    // Similar to KernelWakelock.
    message WakeupReason {
      optional string name = 1;
      optional float time_msec = 2;
      optional float count = 3;
    };
    repeated WakeupReason wakeup_reason = 14; // wr.

    // Similar to SignalStrength.
    message WifiSignalStrength {
      enum Name {
        NONE = 0;
        POOR = 1;
        MODERATE = 2;
        GOOD = 3;
        GREAT = 4;
      };
      optional Name name = 1;
      optional float time_msec = 2;
      optional float count = 3;
    };
    repeated WifiSignalStrength wifi_signal_strength = 16; // wsgt & wsgc.

    message WifiSupplicantState {
      enum Name {
        INVALID = 0;
        DISCONNECTED = 1;
        INTERFACE_DISABLED = 2;
        INACTIVE = 3;
        SCANNING = 4;
        AUTHENTICATING = 5;
        ASSOCIATING = 6;
        ASSOCIATED = 7;
        FOUR_WAY_HANDSHAKE = 8;
        GROUP_HANDSHAKE = 9;
        COMPLETED = 10;
        DORMANT = 11;
        UNINITIALIZED = 12;
      };
      optional Name name = 1;
      optional float time_msec = 2;
      optional float count = 3;
    };
    repeated WifiSupplicantState wifi_supplicant_state = 17; // wsst & wssc.

    // Similar to WifiSupplicantState.
    message WifiState {
      enum Name {
        OFF = 0;
        OFF_SCANNING = 1;
        ON_NO_NETWORKS = 2;
        ON_DISCONNECTED = 3;
        ON_CONNECTED_STA = 4;
        ON_CONNECTED_P2P = 5;
        ON_CONNECTED_STA_P2P = 6;
        SOFT_AP = 7;
      };
      optional Name name = 1;
      optional float time_msec = 2;
      optional float count = 3;
    };
    repeated WifiState wifi_state = 15; // wst & wsc.

    // Next tag: 27
  };
  optional System system = 27; // System-level stats.

  // Next tag: 32
};
