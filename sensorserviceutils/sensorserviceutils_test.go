// Copyright 2020 Google LLC. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package sensorserviceutils

import (
	"fmt"
	"reflect"
	"strings"
	"testing"

	"github.com/googleinterns/sensor-historian/bugreportutils"
	"github.com/googleinterns/sensor-historian/csv"
	acpb "github.com/googleinterns/sensor-historian/pb/activeconnection_proto"
)

func TestParse(t *testing.T) {
	meta := &bugreportutils.MetaInfo{
		DeviceID:   `123456789012345678`,
		SdkVersion: 21,
		Sensors: map[int32]bugreportutils.SensorInfo{
			1: {
				Name:        `BMI160 accelerometer`,
				Type:        `android.sensor.accelerometer`,
				Number:      1,
				Version:     1,
				RequestMode: `continuous`,
				WakeUp:      false,
				MaxDelay:    160000,
				MinDelay:    5000,
				Batch:       true,
				Max:         3000,
			},
			7: {
				Name:        `RPR0521 light`,
				Type:        `android.sensor.light`,
				Number:      7,
				Version:     1,
				RequestMode: `on-change`,
				WakeUp:      false,
				MaxDelay:    10000000,
				MinDelay:    200000,
				Batch:       false,
			},
			4: {
				Name:        `BMP280 pressure`,
				Type:        `android.sensor.pressure`,
				Number:      4,
				Version:     1,
				RequestMode: `continuous`,
				WakeUp:      false,
				MaxDelay:    10000000,
				MinDelay:    100000,
				Batch:       true,
				Max:         300,
			},
			31: {
				Name:        `Window Orientation`,
				Type:        `com.google.sensor.window_orientation`,
				Number:      31,
				Version:     1,
				RequestMode: `on-change`,
				WakeUp:      true,
				MaxDelay:    0,
				MinDelay:    0,
				Batch:       false,
			},
			24: {
				Name:        `BMI160 Step counter`,
				Type:        `android.sensor.step_counter`,
				Number:      24,
				Version:     1,
				RequestMode: `on-change`,
				WakeUp:      false,
				MaxDelay:    0,
				MinDelay:    0,
				Batch:       false,
			},
		},
	}
	tests := []struct {
		name, finput     string
		wantActiveConn   map[int32]*acpb.ActiveConn
		wantCSV          string
		wantSensorErrors []error
	}{
		{
			name: "[Active Sensor and Connections] Test 1: " +
				"All entries entered for active sensors and connections. " +
				"No sensor errors.",
			// All active sensors's information is available.
			// Previous registration section but no history in it,
			// so all active connections have its relevant subscription history.
			// No Sensor Errors.
			finput: strings.Join([]string{
				`========================================================`,
				`== dumpstate: 2015-07-07 18:07:00`,
				`========================================================`,
				``,
				`...`,
				`Sensor Device:`,
				`Total 44 h/w sensors, 44 running:`,
				`0x00000018) active-count = 1; sampling_period(ms) = {250.0}, selected = 250.00 ms; batching_period(ms) = {0.0}, selected = 0.00 ms`,
				`0x00000004) active-count = 1; sampling_period(ms) = {66.7}, selected = 66.67 ms; batching_period(ms) = {0.0}, selected = 0.00 ms`,
				`0x00000007) active-count = 1; sampling_period(ms) = {200.0}, selected = 200.00 ms; batching_period(ms) = {100.0}, selected = 100.00 ms`,
				`0x0000001f) active-count = 1; sampling_period(ms) = {20.0}, selected = 20.00 ms; batching_period(ms) = {0.0}, selected = 0.00 ms`,
				`0x00000001) active-count = 1; sampling_period(ms) = {20.0}, selected = 20.00 ms; batching_period(ms) = {0.0}, selected = 0.00 ms`,
				`Sensor List:`,
				`...`,
				`...`,
				`5 active connections`,
				`Connection Number: 0`,
				`	Operating Mode: NORMAL`,
				`	 com.google.android.gms.fitness.sensors.d.b | WakeLockRefCount 0 | uid 10013 | cache size 0 | max cache size 0`,
				`	 BMI160 Step counter 0x00000018 | status: active | pending flush events 0 `,
				`Connection Number: 1 `,
				`	Operating Mode: NORMAL`,
				`	 com.google.android.location.collectionlib.w | WakeLockRefCount 0 | uid 10013 | cache size 0 | max cache size 0`,
				`	 BMP280 pressure 0x00000004 | status: active | pending flush events 0 `,
				`Connection Number: 2 `,
				`	Operating Mode: NORMAL`,
				`	 com.android.server.display.AutomaticBrightnessController | WakeLockRefCount 0 | uid 1000 | cache size 0 | max cache size 0`,
				`	 RPR0521 light 0x00000007 | status: active | pending flush events 0 `,
				`Connection Number: 3 `,
				`	Operating Mode: NORMAL`,
				`	 com.android.server.policy.WindowOrientationListener | WakeLockRefCount 0 | uid 1000 | cache size 0 | max cache size 0`,
				`	 Window Orientation 0x0000001f | status: active | pending flush events 0 `,
				`Connection Number: 4 `,
				`	Operating Mode: NORMAL`,
				`	 civ | WakeLockRefCount 0 | uid 10182 | cache size 0 | max cache size 0`,
				`	 BMI160 accelerometer 0x00000001 | status: active | pending flush events 0 `,
				`Previous Registrations:`,
			}, "\n"),
			wantActiveConn: map[int32]*acpb.ActiveConn{
				1: {
					Number:                 1,
					OperatingMode:          "NORMAL",
					PackageName:            "com.google.android.gms.fitness.sensors.d.b",
					UID:                    10013,
					SensorNumber:           24,
					PendingFlush:           0,
					SamplingPeriodUs:       250000,
					BatchingPeriodUs:       0,
					HasSensorserviceRecord: false,
					Source:                 "Sensorservice Dump",
				},
				2: {
					Number:                 2,
					OperatingMode:          "NORMAL",
					PackageName:            "com.google.android.location.collectionlib.w",
					UID:                    10013,
					SensorNumber:           4,
					PendingFlush:           0,
					SamplingPeriodUs:       66670,
					BatchingPeriodUs:       0,
					HasSensorserviceRecord: false,
					Source:                 "Sensorservice Dump",
				},
				3: {
					Number:                 3,
					OperatingMode:          "NORMAL",
					PackageName:            "com.android.server.display.AutomaticBrightnessController",
					UID:                    1000,
					SensorNumber:           7,
					PendingFlush:           0,
					SamplingPeriodUs:       200000,
					BatchingPeriodUs:       100000,
					HasSensorserviceRecord: false,
					Source:                 "Sensorservice Dump",
				},
				4: {
					Number:                 4,
					OperatingMode:          "NORMAL",
					PackageName:            "com.android.server.policy.WindowOrientationListener",
					UID:                    1000,
					SensorNumber:           31,
					PendingFlush:           0,
					SamplingPeriodUs:       20000,
					BatchingPeriodUs:       0,
					HasSensorserviceRecord: false,
					Source:                 "Sensorservice Dump",
				},
				5: {
					Number:                 5,
					OperatingMode:          "NORMAL",
					PackageName:            "civ",
					UID:                    10182,
					SensorNumber:           1,
					PendingFlush:           0,
					SamplingPeriodUs:       20000,
					BatchingPeriodUs:       0,
					HasSensorserviceRecord: false,
					Source:                 "Sensorservice Dump",
				},
			},
			wantCSV: strings.Join([]string{
				csv.FileHeader,
				`Sensorservice Registration,string,1436292420000,1436292420000,"24,10013,com.google.android.gms.fitness.sensors.d.b,250000,0,Sensorservice Dump",`,
				`Sensorservice Registration,string,1436292420000,1436292420000,"4,10013,com.google.android.location.collectionlib.w,66670,0,Sensorservice Dump",`,
				`Sensorservice Registration,string,1436292420000,1436292420000,"7,1000,com.android.server.display.AutomaticBrightnessController,200000,100000,Sensorservice Dump",`,
				`Sensorservice Registration,string,1436292420000,1436292420000,"31,1000,com.android.server.policy.WindowOrientationListener,20000,0,Sensorservice Dump",`,
				`Sensorservice Registration,string,1436292420000,1436292420000,"1,10182,civ,20000,0,Sensorservice Dump",`,
			}, "\n"),
		},
		{
			name: "[Active Sensor and Connections] Test 2: " +
				"Active connection 2 misses information. " +
				"No sensor errors.",
			// Missing information for active connection 2.
			// All active sensor's information is available.
			// Previous registration section but no history in it,
			// so all active connections have its relevant subscription history.
			// No Sensor Errors.
			finput: strings.Join([]string{
				`========================================================`,
				`== dumpstate: 2015-07-07 18:07:00`,
				`========================================================`,
				``,
				`Sensor Device:`,
				`Total 44 h/w sensors, 44 running:`,
				`0x00000018) active-count = 1; sampling_period(ms) = {250.0}, selected = 250.00 ms; batching_period(ms) = {0.0}, selected = 0.00 ms`,
				`0x00000004) active-count = 1; sampling_period(ms) = {66.7}, selected = 66.67 ms; batching_period(ms) = {0.0}, selected = 0.00 ms`,
				`Sensor List:`,
				`...`,
				`...`,
				`5 active connections`,
				`Connection Number: 0`,
				`	Operating Mode: NORMAL`,
				`	 com.google.android.gms.fitness.sensors.d.b | WakeLockRefCount 0 | uid 10013 | cache size 0 | max cache size 0`,
				`	 BMI160 Step counter 0x00000018 | status: active | pending flush events 0 `,
				`Connection Number: 1 `,
				`	Operating Mode: NORMAL`,
				`	 BMP280 pressure 0x00000004 | status: active | pending flush events 0 `,
				`Previous Registrations:`,
			}, "\n"),
			wantActiveConn: map[int32]*acpb.ActiveConn{
				1: {
					Number:                 1,
					OperatingMode:          "NORMAL",
					PackageName:            "com.google.android.gms.fitness.sensors.d.b",
					UID:                    10013,
					SensorNumber:           24,
					PendingFlush:           0,
					SamplingPeriodUs:       250000,
					BatchingPeriodUs:       0,
					HasSensorserviceRecord: false,
					Source:                 "Sensorservice Dump",
				},
				2: {
					Number:                 2,
					OperatingMode:          "NORMAL",
					PackageName:            "",
					UID:                    -1,
					SensorNumber:           4,
					PendingFlush:           0,
					SamplingPeriodUs:       66670,
					BatchingPeriodUs:       0,
					HasSensorserviceRecord: false,
					Source:                 "Sensorservice Dump",
				},
			},
			wantCSV: strings.Join([]string{
				csv.FileHeader,
				`Sensorservice Registration,string,1436292420000,1436292420000,"24,10013,com.google.android.gms.fitness.sensors.d.b,250000,0,Sensorservice Dump",`,
				`Sensorservice Registration,string,1436292420000,1436292420000,"4,-1,,66670,0,Sensorservice Dump",`,
			}, "\n"),
		},
		{
			name: "[Active Sensor and Connections] Test 3: " +
				"Active connection 2 has repeated information. " +
				"No sensor errors.",
			// Active connection 2 has repeated information.
			// All active sensor's information is available.
			// No previous registration section so all of the active connections
			// has its relevant subscription history.
			// No Sensor Errors.
			finput: strings.Join([]string{
				`========================================================`,
				`== dumpstate: 2015-07-07 18:07:00`,
				`========================================================`,
				``,
				`...`,
				`Sensor Device:`,
				`Total 44 h/w sensors, 44 running:`,
				`0x00000018) active-count = 1; sampling_period(ms) = {250.0}, selected = 250.00 ms; batching_period(ms) = {0.0}, selected = 0.00 ms`,
				`0x00000004) active-count = 1; sampling_period(ms) = {66.7}, selected = 66.67 ms; batching_period(ms) = {0.0}, selected = 0.00 ms`,
				`0x00000007) active-count = 1; sampling_period(ms) = {200.0}, selected = 200.00 ms; batching_period(ms) = {100.0}, selected = 100.00 ms`,
				`0x0000001f) active-count = 1; sampling_period(ms) = {20.0}, selected = 20.00 ms; batching_period(ms) = {0.0}, selected = 0.00 ms`,
				`0x00000001) active-count = 1; sampling_period(ms) = {20.0}, selected = 20.00 ms; batching_period(ms) = {0.0}, selected = 0.00 ms`,
				`Sensor List:`,
				`...`,
				`5 active connections`,
				`Connection Number: 0`,
				`	Operating Mode: NORMAL`,
				`	 com.google.android.gms.fitness.sensors.d.b | WakeLockRefCount 0 | uid 10013 | cache size 0 | max cache size 0`,
				`	 BMI160 Step counter 0x00000018 | status: active | pending flush events 0 `,
				`Connection Number: 1 `,
				`	Operating Mode: NORMAL`,
				`	 com.google.android.location.collectionlib.w | WakeLockRefCount 0 | uid 10013 | cache size 0 | max cache size 0`,
				`	 com.android.server.display.AutomaticBrightnessController | WakeLockRefCount 0 | uid 1000 | cache size 0 | max cache size 0`,
				`	 RPR0521 light 0x00000007 | status: active | pending flush events 0 `,
				`	 Window Orientation 0x0000001f | status: active | pending flush events 0 `,
			}, "\n"),
			wantActiveConn: map[int32]*acpb.ActiveConn{
				1: {
					Number:                 1,
					OperatingMode:          "NORMAL",
					PackageName:            "com.google.android.gms.fitness.sensors.d.b",
					UID:                    10013,
					SensorNumber:           24,
					PendingFlush:           0,
					SamplingPeriodUs:       250000,
					BatchingPeriodUs:       0,
					HasSensorserviceRecord: false,
					Source:                 "Sensorservice Dump",
				},
				2: {
					Number:                 2,
					OperatingMode:          "NORMAL",
					PackageName:            "com.android.server.display.AutomaticBrightnessController",
					UID:                    1000,
					SensorNumber:           31,
					PendingFlush:           0,
					SamplingPeriodUs:       20000,
					BatchingPeriodUs:       0,
					HasSensorserviceRecord: false,
					Source:                 "Sensorservice Dump",
				},
			},
			wantCSV: strings.Join([]string{
				csv.FileHeader,
				`Sensorservice Registration,string,1436292420000,1436292420000,"24,10013,com.google.android.gms.fitness.sensors.d.b,250000,0,Sensorservice Dump",`,
				`Sensorservice Registration,string,1436292420000,1436292420000,"31,1000,com.android.server.display.AutomaticBrightnessController,20000,0,Sensorservice Dump",`,
			}, "\n"),
		},
		{
			name: "[Active Sensor and Connections] Test 4: " +
				"Missing information for active sensor 4. " +
				"1 Sensor error of [Active Connection] exists.",
			// Information for all active connections is availalbe.
			// Missing active sensor information for sensor 4, one sensor error.
			// No previous registration section so all of the active connections
			// has its relevant subscription history.
			finput: strings.Join([]string{
				`========================================================`,
				`== dumpstate: 2015-07-07 18:07:00`,
				`========================================================`,
				``,
				`...`,
				`Sensor Device:`,
				`Total 44 h/w sensors, 44 running:`,
				`0x00000018) active-count = 1; sampling_period(ms) = {250.0}, selected = 250.00 ms; batching_period(ms) = {0.0}, selected = 0.00 ms`,
				`0x00000001) active-count = 1; sampling_period(ms) = {20.0}, selected = 20.00 ms; batching_period(ms) = {0.0}, selected = 0.00 ms`,
				`Sensor List:`,
				`...`,
				`...`,
				`5 active connections`,
				`Connection Number: 0`,
				`	Operating Mode: NORMAL`,
				`	 com.google.android.gms.fitness.sensors.d.b | WakeLockRefCount 0 | uid 10013 | cache size 0 | max cache size 0`,
				`	 BMI160 Step counter 0x00000018 | status: active | pending flush events 0 `,
				`Connection Number: 1 `,
				`	Operating Mode: NORMAL`,
				`	 com.google.android.location.collectionlib.w | WakeLockRefCount 0 | uid 10013 | cache size 0 | max cache size 0`,
				`	 BMP280 pressure 0x00000004 | status: active | pending flush events 0 `,
				`Previous Registrations:`,
			}, "\n"),
			wantActiveConn: map[int32]*acpb.ActiveConn{
				1: {
					Number:                 1,
					OperatingMode:          "NORMAL",
					PackageName:            "com.google.android.gms.fitness.sensors.d.b",
					UID:                    10013,
					SensorNumber:           24,
					PendingFlush:           0,
					SamplingPeriodUs:       250000,
					BatchingPeriodUs:       0,
					HasSensorserviceRecord: false,
					Source:                 "Sensorservice Dump",
				},
				2: {
					Number:                 2,
					OperatingMode:          "NORMAL",
					PackageName:            "com.google.android.location.collectionlib.w",
					UID:                    10013,
					SensorNumber:           4,
					PendingFlush:           0,
					SamplingPeriodUs:       -1,
					BatchingPeriodUs:       -1,
					HasSensorserviceRecord: false,
					Source:                 "Sensorservice Dump",
				},
			},
			wantCSV: strings.Join([]string{
				csv.FileHeader,
				`Sensorservice Registration,string,1436292420000,1436292420000,"24,10013,com.google.android.gms.fitness.sensors.d.b,250000,0,Sensorservice Dump",`,
				`Sensorservice Registration,string,1436292420000,1436292420000,"4,10013,com.google.android.location.collectionlib.w,-1,-1,Sensorservice Dump",`,
			}, "\n"),
			wantSensorErrors: []error{
				fmt.Errorf("[Active Connection]: connection(2): the sensor(4) is not active according to the sensor device section"),
			},
		},
		{
			name: "[History] Test 1: " +
				"All entries entered. " +
				"No sensor errors.",
			// History only has activation statements for 4/5 active connections.
			// Information for all active sensors are availalbe.
			// All active connections have subscription events.
			// No Sensor Errors.
			finput: strings.Join([]string{
				`========================================================`,
				`== dumpstate: 2015-07-07 18:07:00`,
				`========================================================`,
				``,
				`...`,
				`...`,
				`Sensor Device:`,
				`Total 44 h/w sensors, 44 running:`,
				`0x00000018) active-count = 1; sampling_period(ms) = {250.0}, selected = 250.00 ms; batching_period(ms) = {0.0}, selected = 0.00 ms`,
				`0x00000004) active-count = 1; sampling_period(ms) = {66.7}, selected = 66.67 ms; batching_period(ms) = {0.0}, selected = 0.00 ms`,
				`0x00000007) active-count = 1; sampling_period(ms) = {200.0}, selected = 200.00 ms; batching_period(ms) = {100.0}, selected = 100.00 ms`,
				`0x0000001f) active-count = 1; sampling_period(ms) = {20.0}, selected = 20.00 ms; batching_period(ms) = {0.0}, selected = 0.00 ms`,
				`0x00000001) active-count = 1; sampling_period(ms) = {20.0}, selected = 20.00 ms; batching_period(ms) = {0.0}, selected = 0.00 ms`,
				`Sensor List:`,
				`5 active connections`,
				`Connection Number: 0`,
				`	Operating Mode: NORMAL`,
				`	 com.google.android.gms.fitness.sensors.d.b | WakeLockRefCount 0 | uid 10013 | cache size 0 | max cache size 0`,
				`	 BMI160 Step counter 0x00000018 | status: active | pending flush events 0 `,
				`Connection Number: 1 `,
				`	Operating Mode: NORMAL`,
				`	 com.google.android.location.collectionlib.w | WakeLockRefCount 0 | uid 10013 | cache size 0 | max cache size 0`,
				`	 BMP280 pressure 0x00000004 | status: active | pending flush events 0 `,
				`Connection Number: 2 `,
				`	Operating Mode: NORMAL`,
				`	 com.android.server.display.AutomaticBrightnessController | WakeLockRefCount 0 | uid 1000 | cache size 0 | max cache size 0`,
				`	 RPR0521 light 0x00000007 | status: active | pending flush events 0 `,
				`Connection Number: 3 `,
				`	Operating Mode: NORMAL`,
				`	 com.android.server.policy.WindowOrientationListener | WakeLockRefCount 0 | uid 1000 | cache size 0 | max cache size 0`,
				`	 Window Orientation 0x0000001f | status: active | pending flush events 0 `,
				`Connection Number: 4 `,
				`	Operating Mode: NORMAL`,
				`	 civ | WakeLockRefCount 0 | uid 10182 | cache size 0 | max cache size 0`,
				`	 BMI160 accelerometer 0x00000001 | status: active | pending flush events 0 `,
				`Previous Registrations:`,
				`18:00:01 + 0x00000001 pid= 1281 uid= 10182 package=civ samplingPeriod=2500us batchingPeriod=0us`,
				`17:59:01 + 0x00000018 pid= 318 uid= 10013 package=com.google.android.gms.fitness.sensors.d.b samplingPeriod=2500us batchingPeriod=0us`,
				`17:40:01 + 0x00000007 pid= 1888 uid= 1000 package=com.android.server.display.AutomaticBrightnessController samplingPeriod=2500us batchingPeriod=0us`,
				`17:30:11 + 0x00000004 pid= 1281 uid= 10013 package=com.google.android.location.collectionlib.w samplingPeriod=10000us batchingPeriod=0us`,
			}, "\n"),
			wantActiveConn: map[int32]*acpb.ActiveConn{
				1: {
					Number:                 1,
					OperatingMode:          "NORMAL",
					PackageName:            "com.google.android.gms.fitness.sensors.d.b",
					UID:                    10013,
					SensorNumber:           24,
					PendingFlush:           0,
					SamplingPeriodUs:       250000,
					BatchingPeriodUs:       0,
					HasSensorserviceRecord: true,
					Source:                 "Sensorservice Dump",
				},
				2: {
					Number:                 2,
					OperatingMode:          "NORMAL",
					PackageName:            "com.google.android.location.collectionlib.w",
					UID:                    10013,
					SensorNumber:           4,
					PendingFlush:           0,
					SamplingPeriodUs:       66670,
					BatchingPeriodUs:       0,
					HasSensorserviceRecord: true,
					Source:                 "Sensorservice Dump",
				},
				3: {
					Number:                 3,
					OperatingMode:          "NORMAL",
					PackageName:            "com.android.server.display.AutomaticBrightnessController",
					UID:                    1000,
					SensorNumber:           7,
					PendingFlush:           0,
					SamplingPeriodUs:       200000,
					BatchingPeriodUs:       100000,
					HasSensorserviceRecord: true,
					Source:                 "Sensorservice Dump",
				},
				4: {
					Number:                 4,
					OperatingMode:          "NORMAL",
					PackageName:            "com.android.server.policy.WindowOrientationListener",
					UID:                    1000,
					SensorNumber:           31,
					PendingFlush:           0,
					SamplingPeriodUs:       20000,
					BatchingPeriodUs:       0,
					HasSensorserviceRecord: false,
					Source:                 "Sensorservice Dump",
				},
				5: {
					Number:                 5,
					OperatingMode:          "NORMAL",
					PackageName:            "civ",
					UID:                    10182,
					SensorNumber:           1,
					PendingFlush:           0,
					SamplingPeriodUs:       20000,
					BatchingPeriodUs:       0,
					HasSensorserviceRecord: true,
					Source:                 "Sensorservice Dump",
				},
			},
			wantCSV: strings.Join([]string{
				csv.FileHeader,
				`Sensorservice Registration,string,1436292001000,1436292420000,"1,10182,civ,2500,0,Sensorservice Dump",`,
				`Sensorservice Registration,string,1436291941000,1436292420000,"24,10013,com.google.android.gms.fitness.sensors.d.b,2500,0,Sensorservice Dump",`,
				`Sensorservice Registration,string,1436290801000,1436292420000,"7,1000,com.android.server.display.AutomaticBrightnessController,2500,0,Sensorservice Dump",`,
				`Sensorservice Registration,string,1436290211000,1436292420000,"4,10013,com.google.android.location.collectionlib.w,10000,0,Sensorservice Dump",`,
				`Sensorservice Registration,string,1436290211000,1436292420000,"31,1000,com.android.server.policy.WindowOrientationListener,20000,0,Sensorservice Dump",`,
			}, "\n"),
		},
		{
			name: "[History] Test 2: " +
				"Missing information for sensor 1. " +
				"1 Sensor error of [Active Connection] exists.",
			// History only has activation statements for 4/5 active connections.
			// Information for sensor 1 is not available, but an activation
			// statement for Connection No.5 exists.
			// All active connections have subscription events.
			// One sensor error for active connection No.5.
			finput: strings.Join([]string{
				`========================================================`,
				`== dumpstate: 2015-07-07 18:07:00`,
				`========================================================`,
				``,
				`...`,
				`...`,
				`Sensor Device:`,
				`Total 44 h/w sensors, 44 running:`,
				`0x00000018) active-count = 1; sampling_period(ms) = {250.0}, selected = 250.00 ms; batching_period(ms) = {0.0}, selected = 0.00 ms`,
				`0x00000004) active-count = 1; sampling_period(ms) = {66.7}, selected = 66.67 ms; batching_period(ms) = {0.0}, selected = 0.00 ms`,
				`0x00000007) active-count = 1; sampling_period(ms) = {200.0}, selected = 200.00 ms; batching_period(ms) = {100.0}, selected = 100.00 ms`,
				`0x0000001f) active-count = 1; sampling_period(ms) = {20.0}, selected = 20.00 ms; batching_period(ms) = {0.0}, selected = 0.00 ms`,
				`Sensor List:`,
				`5 active connections`,
				`Connection Number: 0`,
				`	Operating Mode: NORMAL`,
				`	 com.google.android.gms.fitness.sensors.d.b | WakeLockRefCount 0 | uid 10013 | cache size 0 | max cache size 0`,
				`	 BMI160 Step counter 0x00000018 | status: active | pending flush events 0 `,
				`Connection Number: 1 `,
				`	Operating Mode: NORMAL`,
				`	 com.google.android.location.collectionlib.w | WakeLockRefCount 0 | uid 10013 | cache size 0 | max cache size 0`,
				`	 BMP280 pressure 0x00000004 | status: active | pending flush events 0 `,
				`Connection Number: 2 `,
				`	Operating Mode: NORMAL`,
				`	 com.android.server.display.AutomaticBrightnessController | WakeLockRefCount 0 | uid 1000 | cache size 0 | max cache size 0`,
				`	 RPR0521 light 0x00000007 | status: active | pending flush events 0 `,
				`Connection Number: 3 `,
				`	Operating Mode: NORMAL`,
				`	 com.android.server.policy.WindowOrientationListener | WakeLockRefCount 0 | uid 1000 | cache size 0 | max cache size 0`,
				`	 Window Orientation 0x0000001f | status: active | pending flush events 0 `,
				`Connection Number: 4 `,
				`	Operating Mode: NORMAL`,
				`	 civ | WakeLockRefCount 0 | uid 10182 | cache size 0 | max cache size 0`,
				`	 BMI160 accelerometer 0x00000001 | status: active | pending flush events 0 `,
				`Previous Registrations:`,
				`18:00:01 + 0x00000001 pid= 1281 uid= 10182 package=civ samplingPeriod=2500us batchingPeriod=0us`,
				`17:59:01 + 0x00000018 pid= 318 uid= 10013 package=com.google.android.gms.fitness.sensors.d.b samplingPeriod=2500us batchingPeriod=0us`,
				`17:40:01 + 0x00000007 pid= 1888 uid= 1000 package=com.android.server.display.AutomaticBrightnessController samplingPeriod=2500us batchingPeriod=0us`,
				`17:30:11 + 0x00000004 pid= 1281 uid= 10013 package=com.google.android.location.collectionlib.w samplingPeriod=10000us batchingPeriod=0us`,
			}, "\n"),
			wantActiveConn: map[int32]*acpb.ActiveConn{
				1: {
					Number:                 1,
					OperatingMode:          "NORMAL",
					PackageName:            "com.google.android.gms.fitness.sensors.d.b",
					UID:                    10013,
					SensorNumber:           24,
					PendingFlush:           0,
					SamplingPeriodUs:       250000,
					BatchingPeriodUs:       0,
					HasSensorserviceRecord: true,
					Source:                 "Sensorservice Dump",
				},
				2: {
					Number:                 2,
					OperatingMode:          "NORMAL",
					PackageName:            "com.google.android.location.collectionlib.w",
					UID:                    10013,
					SensorNumber:           4,
					PendingFlush:           0,
					SamplingPeriodUs:       66670,
					BatchingPeriodUs:       0,
					HasSensorserviceRecord: true,
					Source:                 "Sensorservice Dump",
				},
				3: {
					Number:                 3,
					OperatingMode:          "NORMAL",
					PackageName:            "com.android.server.display.AutomaticBrightnessController",
					UID:                    1000,
					SensorNumber:           7,
					PendingFlush:           0,
					SamplingPeriodUs:       200000,
					BatchingPeriodUs:       100000,
					HasSensorserviceRecord: true,
					Source:                 "Sensorservice Dump",
				},
				4: {
					Number:                 4,
					OperatingMode:          "NORMAL",
					PackageName:            "com.android.server.policy.WindowOrientationListener",
					UID:                    1000,
					SensorNumber:           31,
					PendingFlush:           0,
					SamplingPeriodUs:       20000,
					BatchingPeriodUs:       0,
					HasSensorserviceRecord: false,
					Source:                 "Sensorservice Dump",
				},
				5: {
					Number:                 5,
					OperatingMode:          "NORMAL",
					PackageName:            "civ",
					UID:                    10182,
					SensorNumber:           1,
					PendingFlush:           0,
					SamplingPeriodUs:       -1,
					BatchingPeriodUs:       -1,
					HasSensorserviceRecord: true,
					Source:                 "Sensorservice Dump",
				},
			},
			wantCSV: strings.Join([]string{
				csv.FileHeader,
				`Sensorservice Registration,string,1436292001000,1436292420000,"1,10182,civ,2500,0,Sensorservice Dump",`,
				`Sensorservice Registration,string,1436291941000,1436292420000,"24,10013,com.google.android.gms.fitness.sensors.d.b,2500,0,Sensorservice Dump",`,
				`Sensorservice Registration,string,1436290801000,1436292420000,"7,1000,com.android.server.display.AutomaticBrightnessController,2500,0,Sensorservice Dump",`,
				`Sensorservice Registration,string,1436290211000,1436292420000,"4,10013,com.google.android.location.collectionlib.w,10000,0,Sensorservice Dump",`,
				`Sensorservice Registration,string,1436290211000,1436292420000,"31,1000,com.android.server.policy.WindowOrientationListener,20000,0,Sensorservice Dump",`,
			}, "\n"),
			wantSensorErrors: []error{
				fmt.Errorf("[Active Connection]: connection(5): the sensor(1) is not active according to the sensor device section"),
			},
		},
		{
			name: "[History] Test 3: " +
				"All entries entered. Subscription history all match up." +
				"No sensor error.",
			// History only has activation statements for all active connections.
			// Information for all active sensors are available.
			// All active connections have subscription events.
			// Other subscription events are paired up.
			// The last de-activated statement has no CSV value since it does
			// not have a relevant activation statement.
			finput: strings.Join([]string{
				`========================================================`,
				`== dumpstate: 2015-07-07 18:07:00`,
				`========================================================`,
				``,
				`...`,
				`...`,
				`Sensor Device:`,
				`Total 44 h/w sensors, 44 running:`,
				`0x00000001) active-count = 1; sampling_period(ms) = {20.0}, selected = 20.00 ms; batching_period(ms) = {0.0}, selected = 0.00 ms`,
				`0x00000018) active-count = 1; sampling_period(ms) = {250.0}, selected = 250.00 ms; batching_period(ms) = {0.0}, selected = 0.00 ms`,
				`0x00000004) active-count = 1; sampling_period(ms) = {66.7}, selected = 66.67 ms; batching_period(ms) = {0.0}, selected = 0.00 ms`,
				`0x00000007) active-count = 1; sampling_period(ms) = {200.0}, selected = 200.00 ms; batching_period(ms) = {100.0}, selected = 100.00 ms`,
				`0x0000001f) active-count = 1; sampling_period(ms) = {20.0}, selected = 20.00 ms; batching_period(ms) = {0.0}, selected = 0.00 ms`,
				`Sensor List:`,
				`5 active connections`,
				`Connection Number: 0`,
				`	Operating Mode: NORMAL`,
				`	 com.google.android.gms.fitness.sensors.d.b | WakeLockRefCount 0 | uid 10013 | cache size 0 | max cache size 0`,
				`	 BMI160 Step counter 0x00000018 | status: active | pending flush events 0 `,
				`Connection Number: 1 `,
				`	Operating Mode: NORMAL`,
				`	 com.google.android.location.collectionlib.w | WakeLockRefCount 0 | uid 10013 | cache size 0 | max cache size 0`,
				`	 BMP280 pressure 0x00000004 | status: active | pending flush events 0 `,
				`Connection Number: 2 `,
				`	Operating Mode: NORMAL`,
				`	 com.android.server.display.AutomaticBrightnessController | WakeLockRefCount 0 | uid 1000 | cache size 0 | max cache size 0`,
				`	 RPR0521 light 0x00000007 | status: active | pending flush events 0 `,
				`Connection Number: 3 `,
				`	Operating Mode: NORMAL`,
				`	 com.android.server.policy.WindowOrientationListener | WakeLockRefCount 0 | uid 1000 | cache size 0 | max cache size 0`,
				`	 Window Orientation 0x0000001f | status: active | pending flush events 0 `,
				`Connection Number: 4 `,
				`	Operating Mode: NORMAL`,
				`	 civ | WakeLockRefCount 0 | uid 10182 | cache size 0 | max cache size 0`,
				`	 BMI160 accelerometer 0x00000001 | status: active | pending flush events 0 `,
				`Previous Registrations:`,
				`18:00:01 + 0x00000018 pid= 318 uid= 10013 package=com.google.android.gms.fitness.sensors.d.b samplingPeriod=2500us batchingPeriod=0us`,
				`17:59:01 + 0x00000004 pid= 10086 uid= 10013 package=com.google.android.location.collectionlib.w samplingPeriod=66667us batchingPeriod=0us`,
				`17:57:47 - 0x00000007 pid= 123 uid= 321 package=AA`,
				`17:54:31 + 0x00000001 pid= 233 uid= 10182 package=civ samplingPeriod=20000us batchingPeriod=0us`,
				`17:52:59 + 0x00000007 pid= 123 uid= 321 package=AA samplingPeriod=12345us batchingPeriod=333us`,
				`17:50:03 + 0x00000007 pid= 332 uid= 1000 package=com.android.server.display.AutomaticBrightnessController samplingPeriod=200000us batchingPeriod=100000us`,
				`17:48:47 - 0x00000004 pid= 456 uid= 654 package=BB`,
				`17:46:33 - 0x00000018 pid= 789 uid=135 package=CCC`,
				`17:42:01 + 0x0000001f pid= 15213 uid=1000 package=com.android.server.policy.WindowOrientationListener samplingPeriod=20000us batchingPeriod=0us`,

				`17:41:01 + 0x00000018 pid= 789 uid=135 package=CCC samplingPeriod=155us batchingPeriod=155us`,
				`17:40:09 + 0x00000004 pid= 456 uid= 654 package=BB samplingPeriod=66667us batchingPeriod=0us`,
				`17:40:00 - 0x0000001f pid= 15210 uid= 5000 package=DD`,
			}, "\n"),
			wantActiveConn: map[int32]*acpb.ActiveConn{
				1: {
					Number:                 1,
					OperatingMode:          "NORMAL",
					PackageName:            "com.google.android.gms.fitness.sensors.d.b",
					UID:                    10013,
					SensorNumber:           24,
					PendingFlush:           0,
					SamplingPeriodUs:       250000,
					BatchingPeriodUs:       0,
					HasSensorserviceRecord: true,
					Source:                 "Sensorservice Dump",
				},
				2: {
					Number:                 2,
					OperatingMode:          "NORMAL",
					PackageName:            "com.google.android.location.collectionlib.w",
					UID:                    10013,
					SensorNumber:           4,
					PendingFlush:           0,
					SamplingPeriodUs:       66670,
					BatchingPeriodUs:       0,
					HasSensorserviceRecord: true,
					Source:                 "Sensorservice Dump",
				},
				3: {
					Number:                 3,
					OperatingMode:          "NORMAL",
					PackageName:            "com.android.server.display.AutomaticBrightnessController",
					UID:                    1000,
					SensorNumber:           7,
					PendingFlush:           0,
					SamplingPeriodUs:       200000,
					BatchingPeriodUs:       100000,
					HasSensorserviceRecord: true,
					Source:                 "Sensorservice Dump",
				},
				4: {
					Number:                 4,
					OperatingMode:          "NORMAL",
					PackageName:            "com.android.server.policy.WindowOrientationListener",
					UID:                    1000,
					SensorNumber:           31,
					PendingFlush:           0,
					SamplingPeriodUs:       20000,
					BatchingPeriodUs:       0,
					HasSensorserviceRecord: true,
					Source:                 "Sensorservice Dump",
				},
				5: {
					Number:                 5,
					OperatingMode:          "NORMAL",
					PackageName:            "civ",
					UID:                    10182,
					SensorNumber:           1,
					PendingFlush:           0,
					SamplingPeriodUs:       20000,
					BatchingPeriodUs:       0,
					HasSensorserviceRecord: true,
					Source:                 "Sensorservice Dump",
				},
			},
			wantCSV: strings.Join([]string{
				csv.FileHeader,
				`Sensorservice Registration,string,1436292001000,1436292420000,"24,10013,com.google.android.gms.fitness.sensors.d.b,2500,0,Sensorservice Dump",`,
				`Sensorservice Registration,string,1436291941000,1436292420000,"4,10013,com.google.android.location.collectionlib.w,66667,0,Sensorservice Dump",`,
				`Sensorservice Registration,string,1436291671000,1436292420000,"1,10182,civ,20000,0,Sensorservice Dump",`,
				`Sensorservice Registration,string,1436291579000,1436291867000,"7,321,AA,12345,333,Sensorservice Dump",`,
				`Sensorservice Registration,string,1436291403000,1436292420000,"7,1000,com.android.server.display.AutomaticBrightnessController,200000,100000,Sensorservice Dump",`,
				`Sensorservice Registration,string,1436290921000,1436292420000,"31,1000,com.android.server.policy.WindowOrientationListener,20000,0,Sensorservice Dump",`,
				`Sensorservice Registration,string,1436290861000,1436291193000,"24,135,CCC,155,155,Sensorservice Dump",`,
				`Sensorservice Registration,string,1436290809000,1436291327000,"4,654,BB,66667,0,Sensorservice Dump",`,
			}, "\n"),
		},
		{
			name: "[History] Test 4: " +
				"All entries entered. s" +
				"3 Sensor errors exist: [Invalid Activation], [Multiple Activation], [Multiple De-activation].",
			// History only has activation statements for all active connections.
			// Information for all active sensors are available.
			// All active connections have subscription events.
			// Invalid Activation error: package DD activated sensor 1 at 17:51:55.
			// Multiple Activation error: package BB activated sensor 4 at 17:40:07 and 17:40:09.
			// Multiple De-activation error: package CCC de-activated sensor 24 at 17:45:32 and 17:46:33
			finput: strings.Join([]string{
				`========================================================`,
				`== dumpstate: 2015-07-07 18:07:00`,
				`========================================================`,
				``,
				`...`,
				`...`,
				`Sensor Device:`,
				`Total 44 h/w sensors, 44 running:`,
				`0x00000001) active-count = 1; sampling_period(ms) = {20.0}, selected = 20.00 ms; batching_period(ms) = {0.0}, selected = 0.00 ms`,
				`0x00000018) active-count = 1; sampling_period(ms) = {250.0}, selected = 250.00 ms; batching_period(ms) = {0.0}, selected = 0.00 ms`,
				`0x00000004) active-count = 1; sampling_period(ms) = {66.7}, selected = 66.67 ms; batching_period(ms) = {0.0}, selected = 0.00 ms`,
				`0x00000007) active-count = 1; sampling_period(ms) = {200.0}, selected = 200.00 ms; batching_period(ms) = {100.0}, selected = 100.00 ms`,
				`0x0000001f) active-count = 1; sampling_period(ms) = {20.0}, selected = 20.00 ms; batching_period(ms) = {0.0}, selected = 0.00 ms`,
				`Sensor List:`,
				`5 active connections`,
				`Connection Number: 0`,
				`	Operating Mode: NORMAL`,
				`	 com.google.android.gms.fitness.sensors.d.b | WakeLockRefCount 0 | uid 10013 | cache size 0 | max cache size 0`,
				`	 BMI160 Step counter 0x00000018 | status: active | pending flush events 0 `,
				`Connection Number: 1 `,
				`	Operating Mode: NORMAL`,
				`	 com.google.android.location.collectionlib.w | WakeLockRefCount 0 | uid 10013 | cache size 0 | max cache size 0`,
				`	 BMP280 pressure 0x00000004 | status: active | pending flush events 0 `,
				`Connection Number: 2 `,
				`	Operating Mode: NORMAL`,
				`	 com.android.server.display.AutomaticBrightnessController | WakeLockRefCount 0 | uid 1000 | cache size 0 | max cache size 0`,
				`	 RPR0521 light 0x00000007 | status: active | pending flush events 0 `,
				`Connection Number: 3 `,
				`	Operating Mode: NORMAL`,
				`	 com.android.server.policy.WindowOrientationListener | WakeLockRefCount 0 | uid 1000 | cache size 0 | max cache size 0`,
				`	 Window Orientation 0x0000001f | status: active | pending flush events 0 `,
				`Connection Number: 4 `,
				`	Operating Mode: NORMAL`,
				`	 civ | WakeLockRefCount 0 | uid 10182 | cache size 0 | max cache size 0`,
				`	 BMI160 accelerometer 0x00000001 | status: active | pending flush events 0 `,
				`Previous Registrations:`,
				`18:00:01 + 0x00000018 pid= 318 uid= 10013 package=com.google.android.gms.fitness.sensors.d.b samplingPeriod=2500us batchingPeriod=0us`,
				`17:59:01 + 0x00000004 pid= 10086 uid= 10013 package=com.google.android.location.collectionlib.w samplingPeriod=66667us batchingPeriod=0us`,
				`17:57:47 - 0x00000007 pid= 123 uid= 321 package=AA`,
				`17:54:31 + 0x00000001 pid= 233 uid= 10182 package=civ samplingPeriod=20000us batchingPeriod=0us`,
				`17:52:59 + 0x00000007 pid= 123 uid= 321 package=AA samplingPeriod=12345us batchingPeriod=333us`,
				`17:51:55 + 0x00000001 pid= 123 uid= 985 package=DD samplingPeriod=123us batchingPeriod=333us`,
				`17:50:03 + 0x00000007 pid= 332 uid= 1000 package=com.android.server.display.AutomaticBrightnessController samplingPeriod=200000us batchingPeriod=100000us`,
				`17:48:47 - 0x00000004 pid= 456 uid= 654 package=BB`,
				`17:46:33 - 0x00000018 pid= 789 uid=135 package=CCC`,
				`17:42:01 + 0x0000001f pid= 15213 uid=1000 package=com.android.server.policy.WindowOrientationListener samplingPeriod=20000us batchingPeriod=0us`,
				`17:45:32 - 0x00000018 pid= 789 uid=135 package=CCC`,
				`17:41:01 + 0x00000018 pid= 789 uid=135 package=CCC samplingPeriod=155us batchingPeriod=155us`,
				`17:40:09 + 0x00000004 pid= 456 uid= 654 package=BB samplingPeriod=66667us batchingPeriod=0us`,
				`17:40:07 + 0x00000004 pid= 456 uid= 654 package=BB samplingPeriod=66667us batchingPeriod=0us`,
				`17:40:00 - 0x0000001f pid= 15210 uid= 5000 package=DD`,
			}, "\n"),
			wantActiveConn: map[int32]*acpb.ActiveConn{
				1: {
					Number:                 1,
					OperatingMode:          "NORMAL",
					PackageName:            "com.google.android.gms.fitness.sensors.d.b",
					UID:                    10013,
					SensorNumber:           24,
					PendingFlush:           0,
					SamplingPeriodUs:       250000,
					BatchingPeriodUs:       0,
					HasSensorserviceRecord: true,
					Source:                 "Sensorservice Dump",
				},
				2: {
					Number:                 2,
					OperatingMode:          "NORMAL",
					PackageName:            "com.google.android.location.collectionlib.w",
					UID:                    10013,
					SensorNumber:           4,
					PendingFlush:           0,
					SamplingPeriodUs:       66670,
					BatchingPeriodUs:       0,
					HasSensorserviceRecord: true,
					Source:                 "Sensorservice Dump",
				},
				3: {
					Number:                 3,
					OperatingMode:          "NORMAL",
					PackageName:            "com.android.server.display.AutomaticBrightnessController",
					UID:                    1000,
					SensorNumber:           7,
					PendingFlush:           0,
					SamplingPeriodUs:       200000,
					BatchingPeriodUs:       100000,
					HasSensorserviceRecord: true,
					Source:                 "Sensorservice Dump",
				},
				4: {
					Number:                 4,
					OperatingMode:          "NORMAL",
					PackageName:            "com.android.server.policy.WindowOrientationListener",
					UID:                    1000,
					SensorNumber:           31,
					PendingFlush:           0,
					SamplingPeriodUs:       20000,
					BatchingPeriodUs:       0,
					HasSensorserviceRecord: true,
					Source:                 "Sensorservice Dump",
				},
				5: {
					Number:                 5,
					OperatingMode:          "NORMAL",
					PackageName:            "civ",
					UID:                    10182,
					SensorNumber:           1,
					PendingFlush:           0,
					SamplingPeriodUs:       20000,
					BatchingPeriodUs:       0,
					HasSensorserviceRecord: true,
					Source:                 "Sensorservice Dump",
				},
			},
			wantCSV: strings.Join([]string{
				csv.FileHeader,
				`Sensorservice Registration,string,1436292001000,1436292420000,"24,10013,com.google.android.gms.fitness.sensors.d.b,2500,0,Sensorservice Dump",`,
				`Sensorservice Registration,string,1436291941000,1436292420000,"4,10013,com.google.android.location.collectionlib.w,66667,0,Sensorservice Dump",`,
				`Sensorservice Registration,string,1436291671000,1436292420000,"1,10182,civ,20000,0,Sensorservice Dump",`,
				`Sensorservice Registration,string,1436291579000,1436291867000,"7,321,AA,12345,333,Sensorservice Dump",`,
				`Sensorservice Registration,string,1436291403000,1436292420000,"7,1000,com.android.server.display.AutomaticBrightnessController,200000,100000,Sensorservice Dump",`,
				`Sensorservice Registration,string,1436290921000,1436292420000,"31,1000,com.android.server.policy.WindowOrientationListener,20000,0,Sensorservice Dump",`,
				`Sensorservice Registration,string,1436290861000,1436291193000,"24,135,CCC,155,155,Sensorservice Dump",`,
				`Sensorservice Registration,string,1436290809000,1436291327000,"4,654,BB,66667,0,Sensorservice Dump",`,
			}, "\n"),
			wantSensorErrors: []error{
				fmt.Errorf("[Invalid Activation]: connection between pkg(DD) and sensor(1) should be active"),
				fmt.Errorf("[Multiple De-Activation]: for pkg(CCC) and sensor(24)"),
				fmt.Errorf("[Multiple Activation]: for pkg(BB) and sensor(4)"),
			},
		},
	}
	for _, test := range tests {
		OutputData := Parse(test.finput, meta)
		if !reflect.DeepEqual(OutputData.ActiveConns, test.wantActiveConn) {
			t.Errorf("Active connection does not match: %v:\n   got: %v\n  want: %v",
				test.name, OutputData.ActiveConns, test.wantActiveConn)
		}
		gotCSV := strings.TrimSpace(OutputData.CSV)
		wantCSV := strings.TrimSpace(test.wantCSV)
		if !reflect.DeepEqual(gotCSV, wantCSV) {
			t.Errorf("History does not matchs: %v:\n  got: %v\n want: %v",
				test.name, gotCSV, wantCSV)
		}
		if !reflect.DeepEqual(OutputData.SensorErrs, test.wantSensorErrors) {
			t.Errorf("SensorErrors: %v:\n  got errs: %v\n want errs: %v",
				test.name, OutputData.SensorErrs, test.wantSensorErrors)
		}
	}
}
